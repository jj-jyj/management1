{"remainingRequest":"D:\\jiao\\uni-app\\management1\\node_modules\\babel-loader\\lib\\index.js!D:\\jiao\\uni-app\\management1\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\jiao\\uni-app\\management1\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\jiao\\uni-app\\management1\\src\\views\\user\\User.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\jiao\\uni-app\\management1\\src\\views\\user\\User.vue","mtime":1604373021767},{"path":"D:\\jiao\\uni-app\\management1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1603939427007},{"path":"D:\\jiao\\uni-app\\management1\\node_modules\\babel-loader\\lib\\index.js","mtime":1603939453085},{"path":"D:\\jiao\\uni-app\\management1\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1603939427007},{"path":"D:\\jiao\\uni-app\\management1\\node_modules\\vue-loader\\lib\\index.js","mtime":1603939447929}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.search\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"D:\\\\jiao\\\\uni-app\\\\management1\\\\node_modules\\\\@babel\\\\runtime-corejs2/helpers/esm/asyncToGenerator\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"User\",\n  data: function data() {\n    return {\n      search: \"\",\n      total: 1,\n      pagenum: 1,\n      pagesize: 2,\n      userlist: [],\n      //   是否显示对话框\n      dialogFormVisibleadd: false,\n      dialogFormVisibleedit: false,\n      dialogFormVisibleRol: false,\n      // 添加用户表单数据\n      form: {\n        //   这里面的数据要结合接口文档看\n        // | username | 用户名称 | 不能为空 |\n        // | password | 用户密码 | 不能为空 |\n        // | email    | 邮箱     | 可以为空 |\n        // | mobile   | 手机号   | 可以为空 |\n        username: '',\n        password: '',\n        email: '',\n        mobile: ''\n      },\n      currRoleId: 0,\n      name: '',\n      curruserId: -1,\n      roles: []\n    };\n  },\n  components: {},\n  created: function created() {\n    this.getuserinfo();\n  },\n  methods: {\n    getuserinfo: function () {\n      var _getuserinfo = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var AUTH_TOKEN, res, _res$data, _res$data$data, total, users, _res$data$meta, msg, status;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                // 2.虽然按照接口文档将参数传递过去了,但还是获取不到数据,需要授权的API,必须在请求头中使用Authorization 字段提供token 令牌\n                // 获取token值\n                AUTH_TOKEN = localStorage.getItem(\"token\"); // 设置请求头\n\n                this.$http.defaults.headers.common[\"Authorization\"] = AUTH_TOKEN; // 1.请求列表的数据\n\n                _context.next = 4;\n                return this.$http.get(\"users?query=\".concat(this.search, \"&pagenum=\").concat(this.pagenum, \"&pagesize=\").concat(this.pagesize));\n\n              case 4:\n                res = _context.sent;\n                //有参数要传递参数\n                //   console.log(res);\n                // 拿到数据后将要用到的数据结构出来\n                _res$data = res.data, _res$data$data = _res$data.data, total = _res$data$data.total, users = _res$data$data.users, _res$data$meta = _res$data.meta, msg = _res$data$meta.msg, status = _res$data$meta.status;\n\n                if (status === 200) {\n                  // 1.给表格数据赋值\n                  this.userlist = users; // 2.给total赋值\n\n                  this.total = total; // 3.提示\n\n                  this.$message.success(msg);\n                } else {\n                  this.$message.warning(msg);\n                }\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function getuserinfo() {\n        return _getuserinfo.apply(this, arguments);\n      }\n\n      return getuserinfo;\n    }(),\n    // 分页的相关事件\n    handleSizeChange: function handleSizeChange(val) {\n      console.log(\"\\u6BCF\\u9875 \".concat(val, \" \\u6761\"));\n      this.pagesize = val; // 更新视图\n\n      this.getuserinfo();\n    },\n    handleCurrentChange: function handleCurrentChange(val) {\n      console.log(\"\\u5F53\\u524D\\u9875: \".concat(val));\n      this.pagenum = val;\n      this.getuserinfo();\n    },\n    //  搜索事件\n    searchclick: function searchclick() {\n      // 重新发送请求\n      this.getuserinfo();\n    },\n    // 点击x清空搜索中数据,并重新获取数据展示\n    loaduserlist: function loaduserlist() {\n      this.getuserinfo();\n    },\n    // 添加用户-显示弹出\n    showaddformvisible: function showaddformvisible() {\n      this.form = {};\n      this.dialogFormVisibleadd = true;\n    },\n    //  添加用户-发送请求\n    adduser: function () {\n      var _adduser = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var res, _res$data2, data, _res$data2$meta, msg, status;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // 2 关闭对话框\n                this.dialogFormVisibleadd = false; // 发送请求\n\n                _context2.next = 3;\n                return this.$http.post(\"users\", this.form);\n\n              case 3:\n                res = _context2.sent;\n                // console.log(res)\n                // 将要用的数据结构出来\n                _res$data2 = res.data, data = _res$data2.data, _res$data2$meta = _res$data2.meta, msg = _res$data2$meta.msg, status = _res$data2$meta.status;\n\n                if (status === 201) {\n                  // 1 弹窗提示\n                  this.$message.success(msg); // 3 更新视图\n\n                  this.getuserinfo(); // 4 清空文本框\n\n                  this.form = {};\n                } else {\n                  this.$message.warning(msg);\n                }\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function adduser() {\n        return _adduser.apply(this, arguments);\n      }\n\n      return adduser;\n    }(),\n    // 删除-弹出提示框\n    deletelist: function deletelist(id) {\n      var _this = this;\n\n      this.$confirm('是否删除用户?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(\n      /*#__PURE__*/\n      _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return _this.$http.delete(\"users/\".concat(id));\n\n              case 2:\n                res = _context3.sent;\n                console.log(res);\n\n                if (res.data.meta.status === 200) {\n                  // 回到第一页\n                  _this.pagenum = 1; // 1 更新视图\n\n                  _this.getuserinfo(); // 2 提示\n\n\n                  _this.$message({\n                    type: 'success',\n                    message: res.data.meta.msg\n                  });\n                }\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }))).catch(function () {\n        _this.$message({\n          type: 'info',\n          message: '已取消删除'\n        });\n      });\n    },\n    // 点击修改用户个人信息\n    useredit: function useredit(user) {\n      // 提示框弹出\n      this.dialogFormVisibleedit = true; // 将user赋值给之前的form \n\n      this.form = user;\n      console.log(this.form);\n    },\n    // 点击修改确认的按钮\n    edituser: function () {\n      var _edituser = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4() {\n        var res, _res$data3, data, _res$data3$meta, msg, status;\n\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                // 关闭对话框\n                this.dialogFormVisibleedit = false; // 发送修改请求\n\n                _context4.next = 3;\n                return this.$http.put(\"users/\".concat(this.form.id), this.form);\n\n              case 3:\n                res = _context4.sent;\n                console.log(res);\n                _res$data3 = res.data, data = _res$data3.data, _res$data3$meta = _res$data3.meta, msg = _res$data3$meta.msg, status = _res$data3$meta.status;\n\n                if (status === 200) {\n                  // 1 弹出提示\n                  this.$message.success(msg); // 3 更新视图\n\n                  this.getuserinfo();\n                } else {\n                  this.$message.warning(msg);\n                }\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function edituser() {\n        return _edituser.apply(this, arguments);\n      }\n\n      return edituser;\n    }(),\n    // 点击修改状态\n    changeMgState: function () {\n      var _changeMgState = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(user) {\n        var res;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // users/:uId/state/:type\n                // 发送请求\n                console.log(user);\n                _context5.next = 3;\n                return this.$http.put(\"users/\".concat(user.id, \"/state/\").concat(user.mg_state));\n\n              case 3:\n                res = _context5.sent;\n\n              case 4:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function changeMgState(_x) {\n        return _changeMgState.apply(this, arguments);\n      }\n\n      return changeMgState;\n    }(),\n    // 点击分配按钮-弹出对话框\n    fenpei: function () {\n      var _fenpei = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(user) {\n        var res, res1;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                // 给name赋值\n                this.name = user.username;\n                this.curruserId = user.id; // 获取当前用户的角色id ->rid\n\n                _context6.next = 4;\n                return this.$http.get(\"users/\".concat(user.id));\n\n              case 4:\n                res = _context6.sent;\n                _context6.next = 7;\n                return this.$http.get(\"roles\");\n\n              case 7:\n                res1 = _context6.sent;\n                // 保存角色数据\n                this.roles = res1.data.data;\n                this.currRoleId = res.data.data.rid;\n                this.dialogFormVisibleRol = true; // console.log(res)\n\n              case 11:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function fenpei(_x2) {\n        return _fenpei.apply(this, arguments);\n      }\n\n      return fenpei;\n    }(),\n    // 点击分配确认的按钮\n    fenpeiuser: function () {\n      var _fenpeiuser = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee7() {\n        var res, _res$data4, data, _res$data4$meta, msg, status;\n\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                // 关闭对话框\n                this.dialogFormVisibleRol = false; // 发送请求 请求体中rid 修改的新值角色id\n\n                _context7.next = 3;\n                return this.$http.put(\"users/\".concat(this.curruserId, \"/role\"), {\n                  rid: this.currRoleId\n                });\n\n              case 3:\n                res = _context7.sent;\n                console.log(res);\n                _res$data4 = res.data, data = _res$data4.data, _res$data4$meta = _res$data4.meta, msg = _res$data4$meta.msg, status = _res$data4$meta.status;\n\n                if (status === 200) {\n                  // 1 弹窗提示\n                  this.$message.success(msg); // 3 这里不需要更新更新视图\n                  // this.getuserinfo()\n                } else {\n                  this.$message.warning(msg);\n                }\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function fenpeiuser() {\n        return _fenpeiuser.apply(this, arguments);\n      }\n\n      return fenpeiuser;\n    }()\n  }\n};",{"version":3,"sources":["User.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <el-card class=\"box-card\">\r\n    <!-- 面包屑 -->\r\n    <!-- 首页用户管理用户列表 -->\r\n    <el-breadcrumb separator-class=\"el-icon-arrow-right\">\r\n      <el-breadcrumb-item>首页</el-breadcrumb-item>\r\n      <el-breadcrumb-item>用户管理</el-breadcrumb-item>\r\n      <el-breadcrumb-item>用户列表</el-breadcrumb-item>\r\n    </el-breadcrumb>\r\n    <!-- 搜索框 -->\r\n    <el-row class=\"row\">\r\n      <el-col>\r\n        <el-input placeholder=\"请输入内容\" v-model=\"search\" class=\"input\" clearable @clear=\"loaduserlist\">\r\n          <el-button slot=\"append\" icon=\"el-icon-search\" @click=\"searchclick\"></el-button>\r\n        </el-input>\r\n        <el-button type=\"primary\" class=\"btn\" @click=\"showaddformvisible\">添加用户</el-button>\r\n      </el-col>\r\n    </el-row>\r\n    <!-- 表格 -->\r\n    <el-table :data=\"userlist\" stripe style=\"width: 100%\">\r\n      <el-table-column type=\"index\" label=\"#\" width=\"50\"> </el-table-column>\r\n      <el-table-column prop=\"username\" label=\"姓名\" width=\"120\">\r\n      </el-table-column>\r\n      <el-table-column prop=\"email\" label=\"邮箱\"> </el-table-column>\r\n      <el-table-column prop=\"mobile\" label=\"电话\"> </el-table-column>\r\n      <el-table-column label=\"时间\">\r\n        <!-- 关于时间格式化的用法   prop=\"create_time |fmtiem\"  不行 -->\r\n        <!-- 1 如果单元格的内容不是文本 需要给该内容外层加容器 template 才会显示 -->\r\n        <!-- 2 作用域拿值问题  一个组件如何想拿另一个组件里面的值则使用: slot-scope=\"scope\" \r\n\t   \t\t这里的scope就是数据源  要拿数据源里面的值 scope.row.具体数据源里面的值-->'\r\n        <template slot-scope=\"scope\">\r\n          {{ scope.row.create_time | fmtiem }}\r\n        </template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"role_name\" label=\"角色\"> </el-table-column>\r\n      <el-table-column prop=\"mg_state\" label=\"状态\">\r\n\t\t<template slot-scope=\"scope\">  \r\n       \t\t<el-switch \r\n\t\t\t   @change=\"changeMgState(scope.row)\"\r\n       \t\t  v-model=\"scope.row.mg_state\"\r\n       \t\t  active-color=\"#13ce66\"\r\n       \t\t  inactive-color=\"#ff4949\"\r\n       \t\t>\r\n       \t\t</el-switch>\r\n\t\t</template>\r\n      </el-table-column>\r\n      <el-table-column prop=\"address\" label=\"操作\" width=\"130\">\r\n\t\t<template slot-scope=\"scope\">  \r\n  \t\t\t<el-button size=\"mini\" plain type=\"primary\" icon=\"el-icon-edit\" circle @click=\"useredit(scope.row)\"></el-button>\r\n  \t\t\t<el-button size=\"mini\" plain type=\"success\" icon=\"el-icon-delete\" circle @click=\"deletelist(scope.row.id)\"></el-button>\r\n  \t\t\t<el-button size=\"mini\" plain type=\"danger\" icon=\"el-icon-s-tools\" circle @click=\"fenpei(scope.row)\"></el-button>\r\n\t\t</template>  \r\n\t  </el-table-column>\r\n    </el-table>\r\n\r\n    <!-- 分页 -->\r\n \t<el-pagination\r\n      @size-change=\"handleSizeChange\"\r\n      @current-change=\"handleCurrentChange\"\r\n      :current-page=\"pagenum\"\r\n      :page-sizes=\"[1, 2, 3, 4]\"\r\n      :page-size=\"4\"\r\n      layout=\"total, sizes, prev, pager, next, jumper\"\r\n      :total=\"total\">\r\n    </el-pagination>\r\n\r\n<!-- 点击添加用户弹出对话框 -->\r\n<el-dialog title=\"添加用户\" :visible.sync=\"dialogFormVisibleadd\">\r\n  <el-form :model=\"form\">\r\n    <el-form-item label=\"用户名\" label-width=\"100px\">\r\n      <el-input v-model=\"form.username\" autocomplete=\"off\"></el-input>\r\n    </el-form-item>\r\n\t<el-form-item label=\"密码\" label-width=\"100px\">\r\n      <el-input v-model=\"form.password\" autocomplete=\"off\"></el-input>\r\n    </el-form-item>\r\n\t<el-form-item label=\"邮箱\" label-width=\"100px\">\r\n      <el-input v-model=\"form.email\" autocomplete=\"off\"></el-input>\r\n    </el-form-item>\r\n\t<el-form-item label=\"手机\" label-width=\"100px\">\r\n      <el-input v-model=\"form.mobile\" autocomplete=\"off\"></el-input>\r\n    </el-form-item>\r\n  </el-form>\r\n  <div slot=\"footer\" class=\"dialog-footer\">\r\n    <el-button @click=\"dialogFormVisibleadd = false\">取 消</el-button>\r\n    <el-button type=\"primary\" @click=\"adduser()\">确 定</el-button>\r\n  </div>\r\n</el-dialog>\r\n\r\n<!-- 点击修改用户弹出对话框 -->\r\n<el-dialog title=\"修改用户信息\" :visible.sync=\"dialogFormVisibleedit\">\r\n  <el-form :model=\"form\">\r\n    <el-form-item label=\"用户名\" label-width=\"100px\">\r\n      <el-input disabled v-model=\"form.username\" autocomplete=\"off\"></el-input>\r\n    </el-form-item>\r\n\t<el-form-item label=\"邮箱\" label-width=\"100px\">\r\n      <el-input v-model=\"form.email\" autocomplete=\"off\"></el-input>\r\n    </el-form-item>\r\n\t<el-form-item label=\"手机\" label-width=\"100px\">\r\n      <el-input v-model=\"form.mobile\" autocomplete=\"off\"></el-input>\r\n    </el-form-item>\r\n  </el-form>\r\n  <div slot=\"footer\" class=\"dialog-footer\">\r\n    <el-button @click=\"dialogFormVisibleedit = false\">取 消</el-button>\r\n    <el-button type=\"primary\" @click=\"edituser()\">确 定</el-button>\r\n  </div>\r\n</el-dialog>\r\n\r\n<!-- 点击分配按钮弹出对话框 -->\r\n<el-dialog title=\"分配角色\" :visible.sync=\"dialogFormVisibleRol\">\r\n  <el-form :model=\"form\">\r\n    <el-form-item label=\"当前用户\" label-width=\"100px\">\r\n      {{name}}\r\n    </el-form-item>\r\n    <el-form-item label=\"角色\" label-width=\"100px\">\r\n      <el-select v-model=\"currRoleId\">\r\n        <el-option label=\"请选择\" :value=\"-1\"></el-option>\r\n        <el-option :label=\"item.roleName\" :value=\"item.id\"\r\n\t\tv-for=\"(item,i) in roles\" :key=\"i\"\r\n\t\t>\r\n\t\t</el-option>\r\n      </el-select>\r\n    </el-form-item>\r\n  </el-form>\r\n  <div slot=\"footer\" class=\"dialog-footer\">\r\n    <el-button @click=\"dialogFormVisible = false\">取 消</el-button>\r\n    <el-button type=\"primary\" @click=\"fenpeiuser()\">确 定</el-button>\r\n  </div>\r\n</el-dialog>\r\n\r\n  </el-card>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"User\",\r\n  data() {\r\n    return {\r\n      search: \"\",\r\n      total: 1,\r\n      pagenum: 1,\r\n      pagesize: 2,\r\n\r\n\t  userlist: [],\r\n\t  //   是否显示对话框\r\n\tdialogFormVisibleadd:false,\r\n\tdialogFormVisibleedit:false,\r\n\tdialogFormVisibleRol:false,\r\n\t// 添加用户表单数据\r\n\t  form:{\r\n\t\t//   这里面的数据要结合接口文档看\r\n\t\t// | username | 用户名称 | 不能为空 |\r\n\t\t// | password | 用户密码 | 不能为空 |\r\n\t\t// | email    | 邮箱     | 可以为空 |\r\n\t\t// | mobile   | 手机号   | 可以为空 |\r\n\t\tusername:'',\r\n\t\tpassword:'',\r\n\t\temail:'',\r\n\t\tmobile:''\r\n\t  },\r\n\t  currRoleId:0,\r\n\t  name:'',\r\n\t  curruserId:-1,\r\n\t  roles:[]\r\n\t\r\n    }; \r\n  },\r\n  components: {},\r\n  created() {\r\n    this.getuserinfo();\r\n  },\r\n  methods: {\r\n    async getuserinfo() {\r\n      // 2.虽然按照接口文档将参数传递过去了,但还是获取不到数据,需要授权的API,必须在请求头中使用Authorization 字段提供token 令牌\r\n      // 获取token值\r\n      const AUTH_TOKEN = localStorage.getItem(\"token\");\r\n      // 设置请求头\r\n      this.$http.defaults.headers.common[\"Authorization\"] = AUTH_TOKEN;\r\n\r\n      // 1.请求列表的数据\r\n      const res = await this.$http.get(\r\n        `users?query=${this.search}&pagenum=${this.pagenum}&pagesize=${this.pagesize}`\r\n      ); //有参数要传递参数\r\n    //   console.log(res);\r\n      // 拿到数据后将要用到的数据结构出来\r\n      const {\r\n        data: { total, users },\r\n        meta: { msg, status },\r\n      } = res.data;\r\n      if (status === 200) {\r\n        // 1.给表格数据赋值\r\n        this.userlist = users;\r\n        // 2.给total赋值\r\n        this.total = total;\r\n        // 3.提示\r\n        this.$message.success(msg);\r\n      } else {\r\n        this.$message.warning(msg);\r\n      }\r\n\t},\r\n\t// 分页的相关事件\r\n\thandleSizeChange(val) {\r\n\t\tconsole.log(`每页 ${val} 条`);\r\n\t\tthis.pagesize = val\r\n\t\t// 更新视图\r\n\t\tthis.getuserinfo()\r\n      },\r\n      handleCurrentChange(val) {\r\n\t\tconsole.log(`当前页: ${val}`);\r\n\t\tthis.pagenum = val\r\n\t\tthis.getuserinfo()\r\n\t\t\r\n\t  },\r\n\t//  搜索事件\r\n\tsearchclick(){\r\n\t\t// 重新发送请求\r\n\t\tthis.getuserinfo()\t\t\r\n\t},\r\n\t// 点击x清空搜索中数据,并重新获取数据展示\r\n\tloaduserlist(){\r\n\t\tthis.getuserinfo()\t\t\r\n\t},\r\n\t// 添加用户-显示弹出\r\n\tshowaddformvisible(){\r\n\t\tthis.form = {}   \r\n\t\tthis.dialogFormVisibleadd=true\r\n\t},\r\n\t//  添加用户-发送请求\r\n\tasync adduser(){\r\n\t\t// 2 关闭对话框\r\n\t\tthis.dialogFormVisibleadd=false\r\n\t\t// 发送请求\r\n\t\tconst res = await this.$http.post(`users`,this.form);\r\n\t\t// console.log(res)\r\n\t\t// 将要用的数据结构出来\r\n\t\tconst {data,meta:{msg,status}} = res.data\r\n\t\tif(status===201){\r\n\t\t\t// 1 弹窗提示\r\n\t\t\tthis.$message.success(msg)\r\n\t\t\t// 3 更新视图\r\n\t\t\tthis.getuserinfo()\r\n\t\t\t// 4 清空文本框\r\n\t\t\tthis.form={}\r\n\t\t}else{\r\n\t\t\tthis.$message.warning(msg)\r\n\r\n\t\t}\r\n\t},\r\n\t// 删除-弹出提示框\r\n\tdeletelist(id){\r\n\t\tthis.$confirm('是否删除用户?', '提示', {\r\n          confirmButtonText: '确定',\r\n          cancelButtonText: '取消',\r\n          type: 'warning'\r\n        }).then(async () => {\r\n\t\t\t// 发送删除的请求 :记得将id传过去\r\n\t\tconst res = await this.$http.delete(`users/${id}`)\r\n\t\tconsole.log(res)\r\n\t\tif(res.data.meta.status===200){\r\n\t\t\t// 回到第一页\r\n\t\t\tthis.pagenum =1\r\n\t\t\t// 1 更新视图\r\n\t\t\tthis.getuserinfo()\r\n\t\t\t// 2 提示\r\n\t\tthis.$message({\r\n            type: 'success',\r\n            message: res.data.meta.msg\r\n          });\r\n\t\t}        \r\n        }).catch(() => {\r\n          this.$message({\r\n            type: 'info',\r\n            message: '已取消删除'\r\n          });          \r\n        });\r\n\t},\r\n\t\r\n\t// 点击修改用户个人信息\r\n\tuseredit(user){\r\n\t\t// 提示框弹出\r\n\t\tthis.dialogFormVisibleedit=true\r\n\t\t// 将user赋值给之前的form \r\n\t\tthis.form = user\r\n\t\tconsole.log(this.form)\r\n\t},\r\n  \r\n\t// 点击修改确认的按钮\r\n\tasync edituser(){\r\n\t\t// 关闭对话框\r\n\t\tthis.dialogFormVisibleedit=false\r\n\t\t// 发送修改请求\r\n\t\tconst res = await this.$http.put(`users/${this.form.id}`,this.form)\r\n\t\tconsole.log(res)\r\n\t\tconst {data,meta:{msg,status}} = res.data\r\n\t\tif(status===200){\r\n\t\t\t// 1 弹出提示\r\n\t\tthis.$message.success(msg)\r\n\t\t\t// 3 更新视图\r\n\t\t\tthis.getuserinfo()\r\n\t\t}else{\r\n\t\tthis.$message.warning(msg)\t\t\t\r\n\t\t}\r\n\t},\r\n\t// 点击修改状态\r\n\tasync changeMgState(user){\r\n\t\t// users/:uId/state/:type\r\n\t\t// 发送请求\r\n\t\tconsole.log(user)\r\n\t\tconst res = await this.$http.put(`users/${user.id}/state/${user.mg_state}`)\r\n\t},\r\n\t// 点击分配按钮-弹出对话框\r\n\tasync fenpei(user){\r\n\t\t// 给name赋值\r\n\t\tthis.name = user.username\r\n\t\tthis.curruserId = user.id\r\n\t\t// 获取当前用户的角色id ->rid\r\n\t\tconst res = await  this.$http.get(`users/${user.id}`)\r\n\t// 获取所有角色\r\n\tconst res1 = await this.$http.get(`roles`)\r\n\t// 保存角色数据\r\n\tthis.roles = res1.data.data\r\n\t\r\n\tthis.currRoleId =res.data.data.rid\r\n\tthis.dialogFormVisibleRol=true\r\n\t// console.log(res)\r\n\t},\r\n\t// 点击分配确认的按钮\r\n\tasync fenpeiuser(){\r\n\t\t// 关闭对话框\r\n\t\tthis.dialogFormVisibleRol=false\r\n\t\t// 发送请求 请求体中rid 修改的新值角色id\r\n\t\tconst res = await this.$http.put(`users/${this.curruserId}/role`,{rid:this.currRoleId})\r\n\t\tconsole.log(res)\r\n\t\tconst {data,meta:{msg,status}} = res.data\r\n\t\tif(status===200){\r\n\t\t\t// 1 弹窗提示\r\n\t\t\tthis.$message.success(msg)\r\n\t\t\t// 3 这里不需要更新更新视图\r\n\t\t\t// this.getuserinfo()\r\n\t\t}else{\r\n\t\t\tthis.$message.warning(msg)\r\n\t\t}\r\n\t}\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.box-card {\r\n  height: 100%;\r\n}\r\n.input {\r\n  width: 300px;\r\n}\r\n.btn {\r\n  margin-left: 15px;\r\n}\r\n.row {\r\n  margin-top: 20px;\r\n}\r\n</style>\r\n"],"sourceRoot":"src/views/user"}]}